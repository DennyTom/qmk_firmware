$include("minunit.h")

$py(engine_path = "../../../../users/dennytom/chording_engine/")

enum pseudolayers {
    ALWAYS_ON, QWERTY, NUM
};

// Macros to simplify chord definitions
$include(engine_path + "macros.inc")

// Keyboard states and settings
$py(custom_keymaps_array = False)
$include("keyboard.inc")

// The chord structure and chord functions (send key, switch pseudolayer, ...)
$include(engine_path + "chord.inc")

$KC("QWERTY", "H_TOP1", "KC_Q")
$KC("QWERTY", "H_TOP2", "KC_W")
$KC("QWERTY", "H_TOP3", "KC_E")
$KC("QWERTY", "H_TOP1 + H_TOP2", "KC_ESC")
$MO("QWERTY", "H_BOT7 + H_BOT8", "NUM")
$DF("QWERTY", "H_BOT9 + H_BOT0", "NUM")
$AS("QWERTY", "H_BOT1", "KC_Z")

// Register all chords, load chording logic
$include(engine_path + "chording_engine.inc")

$TEST("pause_ms")
    pause_ms(500);
    ASSERT_EQ(UINT, current_time, 500);
$END_TEST()

// KC
$TEST("single_dance_held_states")
    ASSERT_EQ(UINT, state_0, IDLE);
    process_record_user(TOP1, &pressed);
    pause_ms(CHORD_TIMEOUT);
    ASSERT_EQ(UINT, state_0, IDLE);
    pause_ms(1);
    ASSERT_EQ(UINT, state_0, ACTIVATED);
    pause_ms(DANCE_TIMEOUT);
    ASSERT_EQ(UINT, state_0, ACTIVATED);
    pause_ms(1);
    ASSERT_EQ(UINT, state_0, PRESS_FROM_ACTIVE);
    pause_ms(DANCE_TIMEOUT);
    ASSERT_EQ(UINT, state_0, PRESS_FROM_ACTIVE);
    pause_ms(1);
    ASSERT_EQ(UINT, state_0, FINISHED_FROM_ACTIVE);
    process_record_user(TOP1, &depressed);
    ASSERT_EQ(UINT, state_0, IDLE);
$END_TEST()

$TEST("single_dance_held_codes")
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_Q], 0);
    process_record_user(TOP1, &pressed);
    pause_ms(CHORD_TIMEOUT);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_Q], 0);
    pause_ms(1);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_Q], 1);
    pause_ms(DANCE_TIMEOUT);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_Q], 1);
    pause_ms(1);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_Q], 1);
    pause_ms(DANCE_TIMEOUT);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_Q], 1);
    pause_ms(1);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_Q], 1);
    process_record_user(TOP1, &depressed);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_Q], 0);
$END_TEST()

$TEST("single_dance_tapped_states")
    ASSERT_EQ(UINT, state_0, IDLE);
    process_record_user(TOP1, &pressed);
    pause_ms(CHORD_TIMEOUT);
    ASSERT_EQ(UINT, state_0, IDLE);
    pause_ms(1);
    ASSERT_EQ(UINT, state_0, ACTIVATED);
    process_record_user(TOP1, &depressed);
    ASSERT_EQ(UINT, state_0, IDLE);
$END_TEST()

$TEST("single_dance_tapped_codes")
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_Q], 0);
    process_record_user(TOP1, &pressed);
    pause_ms(CHORD_TIMEOUT);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_Q], 0);
    pause_ms(1);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_Q], 1);
    process_record_user(TOP1, &depressed);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_Q], 0);
$END_TEST()

// I can not actually track the states if the tap is faster than chord timeout

$TEST("single_dance_tapped_fast_codes")
    ASSERT_EQ(UINT, state_0, IDLE);
    process_record_user(TOP1, &pressed);
    pause_ms(1);
    process_record_user(TOP1, &depressed);
    ASSERT_EQ(UINT, keyboard_history[0][KC_Q], 0);
    ASSERT_EQ(UINT, keyboard_history[1][KC_Q], 1);
    ASSERT_EQ(UINT, keyboard_history[2][KC_Q], 0);
$END_TEST()

$TEST("subchords_are_ignored")
    ASSERT_EQ(UINT, state_0, IDLE);
    process_record_user(TOP1, &pressed);
    pause_ms(1);
    process_record_user(TOP2, &pressed);
    pause_ms(CHORD_TIMEOUT + 1);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_Q], 0);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_W], 0);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_ESC], 1);
$END_TEST()

$TEST("multiple_chords_at_once")
    ASSERT_EQ(UINT, state_0, IDLE);
    process_record_user(TOP1, &pressed);
    pause_ms(1);
    process_record_user(TOP3, &pressed);
    pause_ms(CHORD_TIMEOUT + 1);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_Q], 1);
    ASSERT_EQ(UINT, keyboard_history[history_index][KC_E], 1);
$END_TEST()

// MO
$TEST("momentary_layer")
    ASSERT_EQ(UINT, current_pseudolayer, QWERTY);
    process_record_user(BOT7, &pressed);
    pause_ms(1);
    process_record_user(BOT8, &pressed);
    pause_ms(CHORD_TIMEOUT + 1);
    ASSERT_EQ(UINT, current_pseudolayer, NUM);
    process_record_user(BOT7, &depressed);
    pause_ms(1);
    process_record_user(BOT8, &depressed);
    ASSERT_EQ(UINT, current_pseudolayer, QWERTY);
$END_TEST()

$TEST("momentary_layer_reset")
    ASSERT_EQ(UINT, current_pseudolayer, QWERTY);
    process_record_user(BOT7, &pressed);
    pause_ms(1);
    process_record_user(BOT8, &pressed);
    pause_ms(CHORD_TIMEOUT + 1);
    ASSERT_EQ(UINT, current_pseudolayer, NUM);
    pause_ms(DANCE_TIMEOUT + 1);
    ASSERT_EQ(UINT, current_pseudolayer, NUM);
    process_record_user(BOT7, &depressed);
    pause_ms(1);
    process_record_user(BOT8, &depressed);
    ASSERT_EQ(UINT, current_pseudolayer, QWERTY);
$END_TEST()

// DF
$TEST("permanent_layer")
    ASSERT_EQ(UINT, current_pseudolayer, QWERTY);
    process_record_user(BOT9, &pressed);
    pause_ms(1);
    process_record_user(BOT0, &pressed);
    pause_ms(CHORD_TIMEOUT + 1);
    ASSERT_EQ(UINT, current_pseudolayer, NUM);
    process_record_user(BOT9, &depressed);
    pause_ms(1);
    process_record_user(BOT0, &depressed);
    ASSERT_EQ(UINT, current_pseudolayer, NUM);
$END_TEST()

// AT
$TEST("autoshift_toggle")
    ASSERT_EQ(UINT, autoshift_mode, 1);
    uint8_t state = ACTIVATED;
    struct Chord chord PROGMEM = {0, QWERTY, &state, NULL, 0, 0, autoshift_toggle};
    chord.function(&chord);
    ASSERT_EQ(UINT, autoshift_mode, 0);
    state = ACTIVATED;
    chord.function(&chord);
    ASSERT_EQ(UINT, autoshift_mode, 1);
$END_TEST()

// AS
$TEST("autoshift_tap")
    process_record_user(BOT1, &pressed);
    pause_ms(CHORD_TIMEOUT + 1);
    process_record_user(BOT1, &depressed);
    
    ASSERT_EQ(UINT, keyboard_history[0][KC_Z], 0);
    ASSERT_EQ(UINT, keyboard_history[0][KC_LSFT], 0);
    
    ASSERT_EQ(UINT, keyboard_history[1][KC_Z], 1);
    ASSERT_EQ(UINT, keyboard_history[1][KC_LSFT], 0);
    
    ASSERT_EQ(UINT, keyboard_history[2][KC_Z], 0);
    ASSERT_EQ(UINT, keyboard_history[2][KC_LSFT], 0);
$END_TEST()

$TEST("autoshift_hold")
    $nonlocal(LONG_PRESS_MULTIPLIER)
    process_record_user(BOT1, &pressed);
    pause_ms(CHORD_TIMEOUT + 1);
    pause_ms($(LONG_PRESS_MULTIPLIER) * (DANCE_TIMEOUT + 1));
    process_record_user(BOT1, &depressed);
    
    ASSERT_EQ(UINT, keyboard_history[0][KC_Z], 0);
    ASSERT_EQ(UINT, keyboard_history[0][KC_LSFT], 0);
    
    ASSERT_EQ(UINT, keyboard_history[1][KC_Z], 0);
    ASSERT_EQ(UINT, keyboard_history[1][KC_LSFT], 1);
    
    ASSERT_EQ(UINT, keyboard_history[2][KC_Z], 1);
    ASSERT_EQ(UINT, keyboard_history[2][KC_LSFT], 1);
    
    ASSERT_EQ(UINT, keyboard_history[3][KC_Z], 0);
    ASSERT_EQ(UINT, keyboard_history[3][KC_LSFT], 1);
    
    ASSERT_EQ(UINT, keyboard_history[4][KC_Z], 0);
    ASSERT_EQ(UINT, keyboard_history[4][KC_LSFT], 0);
$END_TEST()

$TEST("autoshift_hold_off")
    autoshift_mode = 0;
    $nonlocal(LONG_PRESS_MULTIPLIER)
    process_record_user(BOT1, &pressed);
    pause_ms(CHORD_TIMEOUT + 1);
    pause_ms($(LONG_PRESS_MULTIPLIER) * (DANCE_TIMEOUT + 1));
    process_record_user(BOT1, &depressed);
    
    ASSERT_EQ(UINT, keyboard_history[0][KC_Z], 0);
    ASSERT_EQ(UINT, keyboard_history[0][KC_LSFT], 0);
    
    ASSERT_EQ(UINT, keyboard_history[1][KC_Z], 1);
    ASSERT_EQ(UINT, keyboard_history[1][KC_LSFT], 0);
    
    ASSERT_EQ(UINT, keyboard_history[2][KC_Z], 0);
    ASSERT_EQ(UINT, keyboard_history[2][KC_LSFT], 0);
$END_TEST()

// TODO:
// KL
// KM
// KK
// TO
// LOCK
// OSK
// OSL
// CMD
// LEADER
// DYNAMIC MACRO
// CLEAR_KB
// RESET

$runner()